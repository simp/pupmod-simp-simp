<%
  _bootstrap_cmd =<<EOM
    /opt/puppetlabs/puppet/bin/ruby /usr/local/sbin/bootstrap_simp_client \\
      --bootstrap-service #{@service_root_name} \\
      --puppet-server #{@_puppet_server} \\
      --puppet-ca #{@_puppet_ca} \\
      --digest-algorithm #{@puppet_digest_algorithm} \\
      --puppet-keylength #{@_puppet_keylength} \\
      --num-puppet-runs #{@num_puppet_runs} \\
      --initial-retry-interval #{@initial_retry_interval} \\
      --retry-factor #{@retry_factor} \\
      --max-seconds #{@max_seconds}
EOM

  _bootstrap_cmd.strip!
  if @puppet_wait_for_cert
    _bootstrap_cmd << " \\\n#{' '*6}--puppet-wait-for-cert #{@puppet_wait_for_cert}"
  else
    _bootstrap_cmd << " \\\n#{' '*6}--puppet-wait-for-cert 0"
  end

  if @puppet_print_stats
    _bootstrap_cmd << " \\\n#{' '*6}--print-stats"
  else
    _bootstrap_cmd << " \\\n#{' '*6}--no-print-stats"
  end

  unless @ntp_servers.empty?
    _ntp_servers = @ntp_servers.dup
    if _ntp_servers.kind_of?(Hash)
      _ntp_servers = _ntp_servers.keys.sort
    end
    _bootstrap_cmd << " \\\n#{' '*6}--ntp-servers #{_ntp_servers.join(',')}"
  end
-%>
#!/bin/sh
#
# <%= @service_root_name %>:  Runs puppet to bootstrap the system configuration.
#
# chkconfig: 35 99 99
#
# description:  A script to bootstrap the initial system configuration using Puppet.
#

unset LC_MESSAGES
[ -f /etc/sysconfig/i18n ] && . /etc/sysconfig/i18n
[ -z "${CONSOLETYPE:-}" ] && CONSOLETYPE="`/sbin/consoletype`"
export LANG

# Source function library
. /etc/init.d/functions

[ -f /etc/sysconfig/<%= @service_root_name %> ] && . /etc/sysconfig/<%= @service_root_name %> && export LOCKED

[ -z "$HOME" ] && export HOME=/

case "$1" in
  status)
    if [ "$LOCKED" == 'true' ]; then
      echo "The server has already been successfully bootstrapped for Puppet."
      echo "To re-run bootstrap, unlock the service per the instructions in"
      echo "/etc/sysconfig/<%= @service_root_name %>"
      RETVAL=0
    else
      echo "The server has **not** been bootstrapped for Puppet."
      echo "Start the <%= @service_root_name %> service in order to bootstrap the server."
      RETVAL=1
    fi
    ;;

  start)
    # Make sure puppet is in the PATH, as is used by bootstrap_simp_client
    export PATH="$PATH:/opt/puppetlabs/bin"

    servername=`hostname -f`
    echo "<%= @service_root_name %>: Bootstrapping $servername"

    # use Puppet's Ruby, so that we can use the Facter library
    # and a more recent version of Ruby
    <%= _bootstrap_cmd %>

    result=$?
    if [ $result -eq 0 ]; then
      echo -n "Bootstrapping $servername"
      success ; echo

      echo "Rebooting to complete the bootstrap."
      reboot;
      # This is here to keep this script from interfering with upstart
      # parallelism.
      sleep 999999999;
    elif [ $result -eq 2 ]; then
      echo -n "$servername bootstrapping has already completed."
      success ; echo
      RETVAL=0
    else
      echo -n "Bootstrapping $servername"
      failure ; echo
      RETVAL=1
<%
   if @reboot_on_failure
-%>

      echo "Rebooting to retry."
      reboot;
      # This is here to keep this script from interfering with upstart
      # parallelism.
      sleep 999999999;
<% end -%>
    fi
    ;;
esac

exit $RETVAL
